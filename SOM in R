segment<- data
library(kohonen)library(RColorBrewer)library(caret)library(dplyr)
glimpse(segment)# drop these variables 
drops <- c("cust_num","tot","sunday_count","monday_count","tuesday_count","wednesday_count","thursday_count",           "friday_count","saturday_count","ovral_reg_num_1","ovral_asset_num_1","ovral_card_num_1","overal_liab_num_1",           "overal_intl_num_1","overal_invst_num_1","overal_add_dtls_num_1","overal_gnrl_num_time_1","overal_error_num_1",           "device","overal_ins_num","overal_ins_time","overal_ins_num_1","ins_time_perc")
segment1 <- segment[,!names(segment) %in% drops]glimpse(segment1)
# segmentation# missing value treatment & standardization
segment1[is.na(segment1)]<-0
# doing train /Test
set.seed(1234)
smp_size <- floor(0.7*nrow(segment1))
train_ind <- sample(seq_len(nrow(segment1)), size = smp_size)
train <- segment1[train_ind, ]
test <- segment1[-train_ind, ]
# Finally, train the SOM, options for the number of iterations,# the learning rates, and the neighbourhood are available
sommap <- som(scale(train),grid=somgrid(10,10,"hexagonal"),rlen=30)for (i  in 1 : 40){plot(sommap,type="property",property=getCodes(sommap,1)[,i],main=colnames(getCodes(sommap,1))[i])}

## use hierarchical clustering to cluster the codebook vectors
display.brewer.all()
som_cluster <- cutree(hclust(dist(getCodes(sommap,1))),10)
som_cluster
pallet <-  brewer.pal(n = 12, name = "Set3")
bgcols <- c("Red","Green","Blue","Yellow","Pink","Magenta","Cyan","White","Gray","Brown",             "lightgreen","")
# plot these results:
plot(sommap, type="mapping", bgcol = pallet[som_cluster], main = "Clusters",col=NULL) add.cluster.boundaries(sommap, som_cluster)
var <-5 
mydata <- getCodes(sommap,1)wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var)) for (i in 2:20) {  wss[i] <- sum(kmeans(mydata, centers=i)$withinss)}plot(wss)
#2nd iteration
keep <- c("intl_time_perc","card_time_perc","reg_time_perc","variety","weekday_perc","avg_3months_duration","avg_num_page","all3months")train1 <- train[,names(train) %in% keep]
glimpse(train1)
sommap1 <- som(scale(train1),grid=somgrid(10,10,"hexagonal"),rlen=12)
som_cluster1 <- cutree(hclust(dist(getCodes(sommap1,1))),8)
pallet <-  brewer.pal(n = 12, name = "Set3")
bgcols <- c("Red","Green","Blue","Yellow","Pink","Magenta","Cyan","White","Gray","Brown",             "lightgreen","")
# plot these results:
plot(sommap1, type="mapping", bgcol = pallet[som_cluster1], main = "Clusters",col=NULL) 
add.cluster.boundaries(sommap1, som_cluster1)

#final Segmentation
sommap2 <- som(scale(train1),grid=somgrid(3,3,"hexagonal"),rlen=10)
plot(sommap2, type="changes")
coolBlueHotRed <- function(n, alpha = 1) {rainbow(n, end=4/6, alpha=alpha)[n:1]}
plot(sommap2, type="count", palette.name= coolBlueHotRed)plot(sommap2, type="dist.neighbours",palette.name= coolBlueHotRed)plot(sommap2, type="codes")
som_cluster2 <- cutree(hclust(dist(getCodes(sommap2,1))),9)
pallet <-  brewer.pal(n = 9, name = "Set3")bgcols <- c("Red","Green","Blue","Yellow","Pink","Magenta","Cyan","White","Gray","Brown",             "lightgreen","")
# plot these results:
plot(sommap2, type="mapping", bgcol = pallet[som_cluster2], main = "Clusters",col=NULL) 
add.cluster.boundaries(sommap2, som_cluster2)
som_ids <- data.frame(som_num = as.vector(sommap2$unit.classif),id= seq(1:nrow(train)))
main_data <- data.frame(id =seq(1:nrow(train)), train[,])
new_fin <- merge(main_data,som_ids,by ="id")
new_fin$device_type[new_fin$device %in% c("PC", "Macintosh")] <- "PC"new_fin$device_type[!(new_fin$device %in% c("PC", "Macintosh"))] <- "Mobile"
group1 <- group_by(new_fin,som_num)
group2 <- group_by(new_fin,som_num,device_type)
set.seed(1234)smp_size <- floor(0.7*nrow(segment1))
train_ind <- sample(seq_len(nrow(segment)), size = smp_size)
train <- segment[train_ind, ]test <- segment[-train_ind, ]
table(new)
summary1 <- summarise(group1,count=n(),all3months_tot=sum(all3months),tot_num_sessn=sum(num_sessn),                      avg_num_page_new=mean(avg_num_page),avg_weekend_perc=mean(weekend_perc),avg_reg_time_perc=mean(reg_time_perc),                      avg_asset_time_perc=mean(asset_time_perc),avg_card_time_perc=mean(card_time_perc),                      avg_intl_time_perc=mean(intl_time_perc),avg_3mnth_num_sessn_new=mean(avg_3mnth_num_sessn),                      avg_3months_duration_new=mean(avg_3months_duration),avg_variety=mean(variety),weekday_perc=mean(weekday_perc))                      
summary2 <- summarise(group2,count=n())
summary3 <- summarise(group1,count=n())
